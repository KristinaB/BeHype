// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(hyperliquid_sdk_swiftFFI)
import hyperliquid_sdk_swiftFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_hyperliquid_sdk_swift_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_hyperliquid_sdk_swift_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureHyperliquidSdkSwiftInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




public protocol HyperliquidClientProtocol: AnyObject, Sendable {
    
    func getAllMids()  -> [PriceInfo]
    
    func getCandlesSnapshot(coin: String, interval: String, startTime: UInt64, endTime: UInt64)  -> [CandleData]
    
    func getExchangeMeta()  -> ExchangeMeta
    
    func getL2Orderbook(coin: String)  -> OrderbookData
    
    func getSpotMeta()  -> [String]
    
    func getTokenBalances(address: String)  -> [TokenBalance]
    
    func swapUsdcToBtc(usdcAmount: String)  -> SwapResult
    
}
open class HyperliquidClient: HyperliquidClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_hyperliquid_sdk_swift_fn_clone_hyperliquidclient(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_constructor_hyperliquidclient_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_hyperliquid_sdk_swift_fn_free_hyperliquidclient(pointer, $0) }
    }

    
public static func newWithWallet(privateKey: String) -> HyperliquidClient  {
    return try!  FfiConverterTypeHyperliquidClient_lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_constructor_hyperliquidclient_new_with_wallet(
        FfiConverterString.lower(privateKey),$0
    )
})
}
    

    
open func getAllMids() -> [PriceInfo]  {
    return try!  FfiConverterSequenceTypePriceInfo.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_all_mids(self.uniffiClonePointer(),$0
    )
})
}
    
open func getCandlesSnapshot(coin: String, interval: String, startTime: UInt64, endTime: UInt64) -> [CandleData]  {
    return try!  FfiConverterSequenceTypeCandleData.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_candles_snapshot(self.uniffiClonePointer(),
        FfiConverterString.lower(coin),
        FfiConverterString.lower(interval),
        FfiConverterUInt64.lower(startTime),
        FfiConverterUInt64.lower(endTime),$0
    )
})
}
    
open func getExchangeMeta() -> ExchangeMeta  {
    return try!  FfiConverterTypeExchangeMeta_lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_exchange_meta(self.uniffiClonePointer(),$0
    )
})
}
    
open func getL2Orderbook(coin: String) -> OrderbookData  {
    return try!  FfiConverterTypeOrderbookData_lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_l2_orderbook(self.uniffiClonePointer(),
        FfiConverterString.lower(coin),$0
    )
})
}
    
open func getSpotMeta() -> [String]  {
    return try!  FfiConverterSequenceString.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_spot_meta(self.uniffiClonePointer(),$0
    )
})
}
    
open func getTokenBalances(address: String) -> [TokenBalance]  {
    return try!  FfiConverterSequenceTypeTokenBalance.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_get_token_balances(self.uniffiClonePointer(),
        FfiConverterString.lower(address),$0
    )
})
}
    
open func swapUsdcToBtc(usdcAmount: String) -> SwapResult  {
    return try!  FfiConverterTypeSwapResult_lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_method_hyperliquidclient_swap_usdc_to_btc(self.uniffiClonePointer(),
        FfiConverterString.lower(usdcAmount),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHyperliquidClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = HyperliquidClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidClient {
        return HyperliquidClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: HyperliquidClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> HyperliquidClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: HyperliquidClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> HyperliquidClient {
    return try FfiConverterTypeHyperliquidClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHyperliquidClient_lower(_ value: HyperliquidClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeHyperliquidClient.lower(value)
}




public struct AssetInfo {
    public var name: String
    public var szDecimals: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, szDecimals: Int32) {
        self.name = name
        self.szDecimals = szDecimals
    }
}

#if compiler(>=6)
extension AssetInfo: Sendable {}
#endif


extension AssetInfo: Equatable, Hashable {
    public static func ==(lhs: AssetInfo, rhs: AssetInfo) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.szDecimals != rhs.szDecimals {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(szDecimals)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAssetInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AssetInfo {
        return
            try AssetInfo(
                name: FfiConverterString.read(from: &buf), 
                szDecimals: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: AssetInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterInt32.write(value.szDecimals, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetInfo_lift(_ buf: RustBuffer) throws -> AssetInfo {
    return try FfiConverterTypeAssetInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAssetInfo_lower(_ value: AssetInfo) -> RustBuffer {
    return FfiConverterTypeAssetInfo.lower(value)
}


public struct CandleData {
    public var timeOpen: UInt64
    public var timeClose: UInt64
    public var coin: String
    public var interval: String
    public var `open`: String
    public var close: String
    public var high: String
    public var low: String
    public var volume: String
    public var numTrades: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(timeOpen: UInt64, timeClose: UInt64, coin: String, interval: String, `open`: String, close: String, high: String, low: String, volume: String, numTrades: UInt64) {
        self.timeOpen = timeOpen
        self.timeClose = timeClose
        self.coin = coin
        self.interval = interval
        self.`open` = `open`
        self.close = close
        self.high = high
        self.low = low
        self.volume = volume
        self.numTrades = numTrades
    }
}

#if compiler(>=6)
extension CandleData: Sendable {}
#endif


extension CandleData: Equatable, Hashable {
    public static func ==(lhs: CandleData, rhs: CandleData) -> Bool {
        if lhs.timeOpen != rhs.timeOpen {
            return false
        }
        if lhs.timeClose != rhs.timeClose {
            return false
        }
        if lhs.coin != rhs.coin {
            return false
        }
        if lhs.interval != rhs.interval {
            return false
        }
        if lhs.`open` != rhs.`open` {
            return false
        }
        if lhs.close != rhs.close {
            return false
        }
        if lhs.high != rhs.high {
            return false
        }
        if lhs.low != rhs.low {
            return false
        }
        if lhs.volume != rhs.volume {
            return false
        }
        if lhs.numTrades != rhs.numTrades {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(timeOpen)
        hasher.combine(timeClose)
        hasher.combine(coin)
        hasher.combine(interval)
        hasher.combine(`open`)
        hasher.combine(close)
        hasher.combine(high)
        hasher.combine(low)
        hasher.combine(volume)
        hasher.combine(numTrades)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCandleData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CandleData {
        return
            try CandleData(
                timeOpen: FfiConverterUInt64.read(from: &buf), 
                timeClose: FfiConverterUInt64.read(from: &buf), 
                coin: FfiConverterString.read(from: &buf), 
                interval: FfiConverterString.read(from: &buf), 
                open: FfiConverterString.read(from: &buf), 
                close: FfiConverterString.read(from: &buf), 
                high: FfiConverterString.read(from: &buf), 
                low: FfiConverterString.read(from: &buf), 
                volume: FfiConverterString.read(from: &buf), 
                numTrades: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: CandleData, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.timeOpen, into: &buf)
        FfiConverterUInt64.write(value.timeClose, into: &buf)
        FfiConverterString.write(value.coin, into: &buf)
        FfiConverterString.write(value.interval, into: &buf)
        FfiConverterString.write(value.`open`, into: &buf)
        FfiConverterString.write(value.close, into: &buf)
        FfiConverterString.write(value.high, into: &buf)
        FfiConverterString.write(value.low, into: &buf)
        FfiConverterString.write(value.volume, into: &buf)
        FfiConverterUInt64.write(value.numTrades, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandleData_lift(_ buf: RustBuffer) throws -> CandleData {
    return try FfiConverterTypeCandleData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCandleData_lower(_ value: CandleData) -> RustBuffer {
    return FfiConverterTypeCandleData.lower(value)
}


public struct ExchangeMeta {
    public var totalAssets: Int32
    public var assets: [AssetInfo]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(totalAssets: Int32, assets: [AssetInfo]) {
        self.totalAssets = totalAssets
        self.assets = assets
    }
}

#if compiler(>=6)
extension ExchangeMeta: Sendable {}
#endif


extension ExchangeMeta: Equatable, Hashable {
    public static func ==(lhs: ExchangeMeta, rhs: ExchangeMeta) -> Bool {
        if lhs.totalAssets != rhs.totalAssets {
            return false
        }
        if lhs.assets != rhs.assets {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(totalAssets)
        hasher.combine(assets)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeExchangeMeta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ExchangeMeta {
        return
            try ExchangeMeta(
                totalAssets: FfiConverterInt32.read(from: &buf), 
                assets: FfiConverterSequenceTypeAssetInfo.read(from: &buf)
        )
    }

    public static func write(_ value: ExchangeMeta, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.totalAssets, into: &buf)
        FfiConverterSequenceTypeAssetInfo.write(value.assets, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExchangeMeta_lift(_ buf: RustBuffer) throws -> ExchangeMeta {
    return try FfiConverterTypeExchangeMeta.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeExchangeMeta_lower(_ value: ExchangeMeta) -> RustBuffer {
    return FfiConverterTypeExchangeMeta.lower(value)
}


public struct OrderLevel {
    public var price: String
    public var size: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(price: String, size: String) {
        self.price = price
        self.size = size
    }
}

#if compiler(>=6)
extension OrderLevel: Sendable {}
#endif


extension OrderLevel: Equatable, Hashable {
    public static func ==(lhs: OrderLevel, rhs: OrderLevel) -> Bool {
        if lhs.price != rhs.price {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(price)
        hasher.combine(size)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOrderLevel: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OrderLevel {
        return
            try OrderLevel(
                price: FfiConverterString.read(from: &buf), 
                size: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: OrderLevel, into buf: inout [UInt8]) {
        FfiConverterString.write(value.price, into: &buf)
        FfiConverterString.write(value.size, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderLevel_lift(_ buf: RustBuffer) throws -> OrderLevel {
    return try FfiConverterTypeOrderLevel.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderLevel_lower(_ value: OrderLevel) -> RustBuffer {
    return FfiConverterTypeOrderLevel.lower(value)
}


public struct OrderbookData {
    public var bids: [OrderLevel]
    public var asks: [OrderLevel]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bids: [OrderLevel], asks: [OrderLevel]) {
        self.bids = bids
        self.asks = asks
    }
}

#if compiler(>=6)
extension OrderbookData: Sendable {}
#endif


extension OrderbookData: Equatable, Hashable {
    public static func ==(lhs: OrderbookData, rhs: OrderbookData) -> Bool {
        if lhs.bids != rhs.bids {
            return false
        }
        if lhs.asks != rhs.asks {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bids)
        hasher.combine(asks)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOrderbookData: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OrderbookData {
        return
            try OrderbookData(
                bids: FfiConverterSequenceTypeOrderLevel.read(from: &buf), 
                asks: FfiConverterSequenceTypeOrderLevel.read(from: &buf)
        )
    }

    public static func write(_ value: OrderbookData, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeOrderLevel.write(value.bids, into: &buf)
        FfiConverterSequenceTypeOrderLevel.write(value.asks, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderbookData_lift(_ buf: RustBuffer) throws -> OrderbookData {
    return try FfiConverterTypeOrderbookData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrderbookData_lower(_ value: OrderbookData) -> RustBuffer {
    return FfiConverterTypeOrderbookData.lower(value)
}


public struct PriceInfo {
    public var coin: String
    public var price: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coin: String, price: String) {
        self.coin = coin
        self.price = price
    }
}

#if compiler(>=6)
extension PriceInfo: Sendable {}
#endif


extension PriceInfo: Equatable, Hashable {
    public static func ==(lhs: PriceInfo, rhs: PriceInfo) -> Bool {
        if lhs.coin != rhs.coin {
            return false
        }
        if lhs.price != rhs.price {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coin)
        hasher.combine(price)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePriceInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PriceInfo {
        return
            try PriceInfo(
                coin: FfiConverterString.read(from: &buf), 
                price: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PriceInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.coin, into: &buf)
        FfiConverterString.write(value.price, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePriceInfo_lift(_ buf: RustBuffer) throws -> PriceInfo {
    return try FfiConverterTypePriceInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePriceInfo_lower(_ value: PriceInfo) -> RustBuffer {
    return FfiConverterTypePriceInfo.lower(value)
}


public struct SwapResult {
    public var success: Bool
    public var message: String
    public var orderId: UInt64?
    public var filledSize: String?
    public var avgPrice: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(success: Bool, message: String, orderId: UInt64?, filledSize: String?, avgPrice: String?) {
        self.success = success
        self.message = message
        self.orderId = orderId
        self.filledSize = filledSize
        self.avgPrice = avgPrice
    }
}

#if compiler(>=6)
extension SwapResult: Sendable {}
#endif


extension SwapResult: Equatable, Hashable {
    public static func ==(lhs: SwapResult, rhs: SwapResult) -> Bool {
        if lhs.success != rhs.success {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.orderId != rhs.orderId {
            return false
        }
        if lhs.filledSize != rhs.filledSize {
            return false
        }
        if lhs.avgPrice != rhs.avgPrice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(success)
        hasher.combine(message)
        hasher.combine(orderId)
        hasher.combine(filledSize)
        hasher.combine(avgPrice)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSwapResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwapResult {
        return
            try SwapResult(
                success: FfiConverterBool.read(from: &buf), 
                message: FfiConverterString.read(from: &buf), 
                orderId: FfiConverterOptionUInt64.read(from: &buf), 
                filledSize: FfiConverterOptionString.read(from: &buf), 
                avgPrice: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: SwapResult, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.success, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterOptionUInt64.write(value.orderId, into: &buf)
        FfiConverterOptionString.write(value.filledSize, into: &buf)
        FfiConverterOptionString.write(value.avgPrice, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSwapResult_lift(_ buf: RustBuffer) throws -> SwapResult {
    return try FfiConverterTypeSwapResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSwapResult_lower(_ value: SwapResult) -> RustBuffer {
    return FfiConverterTypeSwapResult.lower(value)
}


public struct TokenBalance {
    public var coin: String
    public var total: String
    public var hold: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coin: String, total: String, hold: String) {
        self.coin = coin
        self.total = total
        self.hold = hold
    }
}

#if compiler(>=6)
extension TokenBalance: Sendable {}
#endif


extension TokenBalance: Equatable, Hashable {
    public static func ==(lhs: TokenBalance, rhs: TokenBalance) -> Bool {
        if lhs.coin != rhs.coin {
            return false
        }
        if lhs.total != rhs.total {
            return false
        }
        if lhs.hold != rhs.hold {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coin)
        hasher.combine(total)
        hasher.combine(hold)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTokenBalance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TokenBalance {
        return
            try TokenBalance(
                coin: FfiConverterString.read(from: &buf), 
                total: FfiConverterString.read(from: &buf), 
                hold: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: TokenBalance, into buf: inout [UInt8]) {
        FfiConverterString.write(value.coin, into: &buf)
        FfiConverterString.write(value.total, into: &buf)
        FfiConverterString.write(value.hold, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenBalance_lift(_ buf: RustBuffer) throws -> TokenBalance {
    return try FfiConverterTypeTokenBalance.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTokenBalance_lower(_ value: TokenBalance) -> RustBuffer {
    return FfiConverterTypeTokenBalance.lower(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAssetInfo: FfiConverterRustBuffer {
    typealias SwiftType = [AssetInfo]

    public static func write(_ value: [AssetInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAssetInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AssetInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [AssetInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAssetInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeCandleData: FfiConverterRustBuffer {
    typealias SwiftType = [CandleData]

    public static func write(_ value: [CandleData], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCandleData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [CandleData] {
        let len: Int32 = try readInt(&buf)
        var seq = [CandleData]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCandleData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeOrderLevel: FfiConverterRustBuffer {
    typealias SwiftType = [OrderLevel]

    public static func write(_ value: [OrderLevel], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOrderLevel.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [OrderLevel] {
        let len: Int32 = try readInt(&buf)
        var seq = [OrderLevel]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOrderLevel.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePriceInfo: FfiConverterRustBuffer {
    typealias SwiftType = [PriceInfo]

    public static func write(_ value: [PriceInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePriceInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PriceInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [PriceInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePriceInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeTokenBalance: FfiConverterRustBuffer {
    typealias SwiftType = [TokenBalance]

    public static func write(_ value: [TokenBalance], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeTokenBalance.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [TokenBalance] {
        let len: Int32 = try readInt(&buf)
        var seq = [TokenBalance]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeTokenBalance.read(from: &buf))
        }
        return seq
    }
}
public func deriveAddressFromPrivateKey(privateKey: String) -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_func_derive_address_from_private_key(
        FfiConverterString.lower(privateKey),$0
    )
})
}
public func helloHyperliquid() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_hyperliquid_sdk_swift_fn_func_hello_hyperliquid($0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_hyperliquid_sdk_swift_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_func_derive_address_from_private_key() != 48998) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_func_hello_hyperliquid() != 20359) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_all_mids() != 11924) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_candles_snapshot() != 12626) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_exchange_meta() != 12903) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_l2_orderbook() != 1718) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_spot_meta() != 44005) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_get_token_balances() != 6206) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_method_hyperliquidclient_swap_usdc_to_btc() != 61875) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_constructor_hyperliquidclient_new() != 46890) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_hyperliquid_sdk_swift_checksum_constructor_hyperliquidclient_new_with_wallet() != 20760) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureHyperliquidSdkSwiftInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all